<?php
/**
 * @file
 * Helper module for testing metatag.module.
 */

/**
 * Implements hook_menu().
 *
 * Provides simple pages to test against.
 */
function metatag_test_menu() {
  $string = 'moosqueakoinkmeow';
  $defaults = array(
    'page callback' => 'metatag_test_page_callback',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  $items[$string] = array(
    'title' => 'Test page',
    'description' => 'An average page.',
  ) + $defaults;

  // 255 / 19 chars = 13.
  $long_path = implode('/', array_pad(array(), 13, $string));
  $items[$long_path . '/%'] = array(
    'title' => 'Test page with really long URL',
    'description' => 'The URL is really, really, really long.',
    'page arguments' => array(13),
  ) + $defaults;

  // User-specific meta tags.
  $items['account-test-page'] = array(
    'title' => 'User test page',
    'description' => 'Test how user tokens are handled.',
    'page callback' => 'metatag_test_user_page_callback',
  ) + $defaults;

  return $items;
}

/**
 * Simple page callback for test pages.
 */
function metatag_test_page_callback() {
  return t('Test page.');
}

/**
 * Implements hook_metatag_info().
 */
function metatag_test_metatag_info() {
  $info['groups']['testing'] = array(
    'label' => t('Testing'),
    'form' => array(
      '#weight' => 100,
    ),
  );

  $info['test:foo'] = array(
    'label' => t('Foo meta tag'),
    'description' => t('Testing metatag.'),
    'class' => 'BackdropTextMetaTag',
    'group' => 'testing',
  );

  return $info;
}

/**
 * Implements hook_metatag_config_default_alter().
 */
function metatag_test_metatag_config_default_alter(array &$configs) {
  if (isset($configs['test:foo'])) {
    $configs['test:foo']['config']['title']['value'] = 'Test altered title';
  }
}

/**
 * Simple page callback for the user test page.
 */
function metatag_test_user_page_callback() {
  global $user;

  $username = 'Anonymous visitor';
  if (isset($user->name)) {
    $username = $user->name;
  }
  backdrop_set_title('Hello ' . $username);

  return t('Test page for user tokens.');
}
